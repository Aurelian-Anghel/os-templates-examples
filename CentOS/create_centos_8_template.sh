#!/bin/bash

#creates a Centos8 kickstart based template
#This script requires a working metalcloud-cli and jq tools.

#Note this will delete the existing template instead of updating it.

if [ "$#" -ne 2 ]; then
    echo "syntax: $0 <template-id> <os-version (eg: 8.)>"
    exit
fi

TEMPLATE_VERSION="$2" 
TEMPLATE_DISPLAY_NAME="CentOS $TEMPLATE_VERSION"
TEMPLATE_DESCRIPTION="$TEMPLATE_DISPLAY_NAME"
TEMPLATE_LABEL=$1
TEMPLATE_ROOT="/centos/$TEMPLATE_VERSION"


SOURCES="./$TEMPLATE_VERSION"

MC="metalcloud-cli"

DATACENTER_NAME="uk-reading2"
REPO_URL=`metalcloud-cli datacenter get --id $DATACENTER_NAME -show-config -format json | jq ".[0].CONFIG | fromjson |.repoURLRoot" -r`
TEMPLATE_BASE=$REPO_URL/$TEMPLATE_ROOT

$MC os-template delete -id "$TEMPLATE_LABEL" --autoconfirm  2>&1 >/dev/null || true

#create the template
$MC os-template create \
--label "$TEMPLATE_LABEL" \
--display-name "$TEMPLATE_DISPLAY_NAME" \
--description "$TEMPLATE_DESCRIPTION" \
--boot-type uefi_only \
--os-architecture "x86_64" \
--os-type "CentOS" \
--os-version "$TEMPLATE_VERSION" \
--use-autogenerated-initial-password \
--initial-user "root" \
--initial-ssh-port 22 \
--boot-methods-supported "local_drives"

#first param is asset name, 
#second param is asset url relative to $TEMPLATE_BASE 
#third param is usage
function addBinaryURLAsset {
        
    $MC asset list -format json  | jq ".[] | select(.FILENAME==\"${1}-${TEMPLATE_LABEL}\")|.ID" -r | xargs metalcloud-cli asset delete --autoconfirm -id
    $MC asset create -url "$TEMPLATE_BASE/$2" -filename "$1-$TEMPLATE_LABEL" -mime "application/octet-stream" -usage "$3"
    $MC asset associate -id "$1-$TEMPLATE_LABEL" -template-id $TEMPLATE_LABEL -path "/$1"
}

#firt param is file name on disk
#second param is path in tftp/http
#third param is params accepted
function addFileAsset {
    $MC asset list -format json  |jq ".[] | select(.FILENAME==\"${1}-$TEMPLATE_LABEL\")|.ID" -r | xargs metalcloud-cli asset delete --autoconfirm -id
    cat $SOURCES/$1 | $MC asset create -filename "$1-$TEMPLATE_LABEL" -mime "text/plain" -variable-names-required "$3" -pipe
    $MC asset associate -id "$1-$TEMPLATE_LABEL" -template-id $TEMPLATE_LABEL -path "$2"
}

#add bootx64 (pre-bootloader uefi for secure boot)
addBinaryURLAsset "bootx64.efi" "BaseOS/x86_64/kickstart/EFI/BOOT/BOOTX64.EFI" "bootloader"

#set the bootx64 bootloader as the template's default bootloader
metalcloud-cli os-template update -id "$TEMPLATE_LABEL" -install-bootloader-asset "bootx64.efi-$TEMPLATE_LABEL"

#add grub bootloader
addBinaryURLAsset "grubx64.efi" "BaseOS/x86_64/kickstart/EFI/BOOT/grubx64.efi"

#add grub config file
addFileAsset 'grubx64.cfg' '/grub.cfg' "wan_interface_mac_adddress_0,repo_url_root,HTTP_SERVER_ENDPOINT"

#add vmlinuz
addBinaryURLAsset 'vmlinuz' 'BaseOS/x86_64/kickstart/images/pxeboot/vmlinuz'

#add initrd.img
addBinaryURLAsset 'initrd.img' 'BaseOS/x86_64/kickstart/images/pxeboot/initrd.img'

#add kickstart file ks.cfg
addFileAsset 'ks.cfg' '/ks.cfg' "repo_url_root,wan_interface_mac_adddress_0,instance_subdomain_permanent,initial_password,ntp_server_ip_0,HTTP_SERVER_ENDPOINT,management_ssh_key" 

#add snmpd.conf
addFileAsset 'snmpd.conf' '/snmpd.conf' "snmp_port,snmp_security_name,snmp_authentication_protocol,snmp_authentication_passphrase,snmp_privacy_protocol,snmp_privacy_passphrase,snmp_community_password,snmp_security_name,datacenter_name"

